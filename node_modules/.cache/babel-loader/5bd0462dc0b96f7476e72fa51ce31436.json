{"ast":null,"code":"var _jsxFileName = \"/Users/lloydrhodes/Desktop/reactography/src/Components/ForecastPanel.js\";\nimport React from 'react';\nimport cloud from '../images/cloud.png';\nimport rain from '../images/rain.png';\nimport sun from '../images/sun.png';\nimport { format } from 'path';\n\nvar ForecastPanel = function ForecastPanel(props) {\n  var Day = props.Day,\n      Outlook = props.Outlook,\n      Description = props.Description,\n      Temp = props.Temp,\n      Max = props.Max,\n      Min = props.Min,\n      changeTempUnit = props.changeTempUnit,\n      tempUnit = props.tempUnit,\n      formatTemp = props.formatTemp;\n  var emojiChoice = {\n    Clouds: cloud,\n    Drizzle: rain,\n    Sun: sun,\n    Rain: rain\n  };\n  var emoji;\n\n  if (emojiChoice[Outlook] === undefined) {\n    emoji = emojiChoice.Sun;\n  } else {\n    emoji = emojiChoice[Outlook];\n  }\n\n  return React.createElement(\"div\", {\n    className: \"panel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, Day ? React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, Day) : React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"Day\"), React.createElement(\"img\", {\n    className: \"emoji\",\n    src: emoji,\n    alt: \"weather emoji\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    className: \"panelItem\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \" Outlook: \", Outlook), React.createElement(\"p\", {\n    className: \"panelItem\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \" Description: \", Description, \" \"), React.createElement(\"p\", {\n    className: \"panelItem\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \" Temp: \", !Temp ? '-' : formatTemp(Temp)), React.createElement(\"p\", {\n    className: \"panelItem\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"Temp min:\", !Max ? '-' : formatTemp(Max)), React.createElement(\"p\", {\n    className: \"panelItem\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Temp max:\", !Min ? '-' : formatTemp(Min)), React.createElement(\"button\", {\n    className: \"changeTemp\",\n    onClick: changeTempUnit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, tempUnit ? 'Fahrenheit' : 'Celcius'));\n};\n\nexport default ForecastPanel;","map":{"version":3,"sources":["/Users/lloydrhodes/Desktop/reactography/src/Components/ForecastPanel.js"],"names":["React","cloud","rain","sun","format","ForecastPanel","props","Day","Outlook","Description","Temp","Max","Min","changeTempUnit","tempUnit","formatTemp","emojiChoice","Clouds","Drizzle","Sun","Rain","emoji","undefined"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,SAASC,MAAT,QAAuB,MAAvB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAAA,MAErBC,GAFqB,GAE+DD,KAF/D,CAErBC,GAFqB;AAAA,MAEhBC,OAFgB,GAE+DF,KAF/D,CAEhBE,OAFgB;AAAA,MAEPC,WAFO,GAE+DH,KAF/D,CAEPG,WAFO;AAAA,MAEMC,IAFN,GAE+DJ,KAF/D,CAEMI,IAFN;AAAA,MAEYC,GAFZ,GAE+DL,KAF/D,CAEYK,GAFZ;AAAA,MAEiBC,GAFjB,GAE+DN,KAF/D,CAEiBM,GAFjB;AAAA,MAEsBC,cAFtB,GAE+DP,KAF/D,CAEsBO,cAFtB;AAAA,MAEsCC,QAFtC,GAE+DR,KAF/D,CAEsCQ,QAFtC;AAAA,MAEgDC,UAFhD,GAE+DT,KAF/D,CAEgDS,UAFhD;AAI7B,MAAMC,WAAW,GAAG;AAChBC,IAAAA,MAAM,EAAEhB,KADQ;AAEhBiB,IAAAA,OAAO,EAAEhB,IAFO;AAGhBiB,IAAAA,GAAG,EAAEhB,GAHW;AAIhBiB,IAAAA,IAAI,EAAElB;AAJU,GAApB;AAOA,MAAImB,KAAJ;;AACA,MAAIL,WAAW,CAACR,OAAD,CAAX,KAAyBc,SAA7B,EAAwC;AACpCD,IAAAA,KAAK,GAAGL,WAAW,CAACG,GAApB;AACH,GAFD,MAEO;AACHE,IAAAA,KAAK,GAAGL,WAAW,CAACR,OAAD,CAAnB;AACH;;AAID,SAAO;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACFD,GAAG,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,GAAL,CAAH,GAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADrB,EAEH;AAAK,IAAA,SAAS,EAAC,OAAf;AAAuB,IAAA,GAAG,EAAEc,KAA5B;AAAmC,IAAA,GAAG,EAAC,eAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFG,EAGH;AAAG,IAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAoCb,OAApC,CAHG,EAIH;AAAG,IAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAwCC,WAAxC,MAJG,EAKH;AAAG,IAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAiC,CAACC,IAAD,GAAQ,GAAR,GAAcK,UAAU,CAACL,IAAD,CAAzD,CALG,EAMH;AAAG,IAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAmC,CAACC,GAAD,GAAO,GAAP,GAAaI,UAAU,CAACJ,GAAD,CAA1D,CANG,EAOH;AAAG,IAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAmC,CAACC,GAAD,GAAO,GAAP,GAAaG,UAAU,CAACH,GAAD,CAA1D,CAPG,EAQH;AAAQ,IAAA,SAAS,EAAC,YAAlB;AAA+B,IAAA,OAAO,EAAEC,cAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,QAAQ,GAAG,YAAH,GAAkB,SAD7B,CARG,CAAP;AAYH,CAhCD;;AAkCA,eAAeT,aAAf","sourcesContent":["import React from 'react';\nimport cloud from '../images/cloud.png';\nimport rain from '../images/rain.png';\nimport sun from '../images/sun.png';\nimport { format } from 'path';\n\nconst ForecastPanel = (props) => {\n\n    const { Day, Outlook, Description, Temp, Max, Min, changeTempUnit, tempUnit, formatTemp } = props;\n\n    const emojiChoice = {\n        Clouds: cloud,\n        Drizzle: rain,\n        Sun: sun,\n        Rain: rain\n    };\n    \n    let emoji;\n    if (emojiChoice[Outlook] === undefined) {\n        emoji = emojiChoice.Sun;\n    } else {\n        emoji = emojiChoice[Outlook];\n    }\n\n    \n \n    return <div className=\"panel\">\n        {Day ? <h2>{Day}</h2> : <h2>Day</h2>}\n        <img className=\"emoji\" src={emoji} alt=\"weather emoji\" />\n        <p className=\"panelItem\"> Outlook: {Outlook}</p>\n        <p className=\"panelItem\"> Description: {Description} </p>\n        <p className=\"panelItem\"> Temp: {!Temp ? '-' : formatTemp(Temp)}</p>\n        <p className=\"panelItem\">Temp min:{!Max ? '-' : formatTemp(Max)}</p>\n        <p className=\"panelItem\">Temp max:{!Min ? '-' : formatTemp(Min)}</p>\n        <button className=\"changeTemp\" onClick={changeTempUnit}>\n          {tempUnit ? 'Fahrenheit' : 'Celcius'}\n        </button>\n      </div>;\n};\n\nexport default ForecastPanel;"]},"metadata":{},"sourceType":"module"}